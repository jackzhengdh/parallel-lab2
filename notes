
===================================================
=============== Next Parallel Usage ===============
===================================================

Code: 

	double tstart = 0.0, ttaken;
	tstart = omp_get_wtime();

	#pragma omp parallel for num_threads(thread_count)
	for (i = 2; i < N; i++) {
		if (isPrime[i]) {
			int j;
			for (j = i + i; j < N; j += i)
				isPrime[j] = 0;
		}
	}

	int cnt = 0;
	for (i = 2; i < N; i++) {
		if (isPrime[i]) {
			primes[nPrime++] = i;
			cnt++;
		}
	}
	ttaken = omp_get_wtime() - tstart;

Results:

N = 1000000
t = 1: 0.03738, 0.03692, 0.03784, 0.03719
t = 2: 0.03425, 0.03409, 0.03417, 0.03468
t = 10: 0.03260, 0.03232, 0.03117, 0.03168
t = 20: 0.03112, 0.03162, 0.03178, 0.03207
t = 40: 0.03227, 0.03313, 0.03324, 0.03367

===================================================
=============== Next Parallel Usage ===============
===================================================

Code:

	double tstart = 0.0, ttaken;
	tstart = omp_get_wtime();

	#pragma omp parallel for num_threads(thread_count)
	for (i = 2; i < N; i++) {
		if (isPrime[i]) {
			int j;
			#pragma omp for
			for (j = i + i; j < N; j += i)
				isPrime[j] = 0;
		}
	}

	int cnt = 0;
	for (i = 2; i < N; i++) {
		if (isPrime[i]) {
			primes[nPrime++] = i;
			cnt++;
		}
	}
	ttaken = omp_get_wtime() - tstart;

Result:

This simply will not work - WRONG CODE

Compile also issues warning: 
"test1.c:31: warning: work-sharing region may not be closely nested inside of work-sharing, critical, ordered, master or explicit task region"

===================================================
=============== Next Parallel Usage ===============
===================================================

Code:

	double tstart = 0.0, ttaken;
	tstart = omp_get_wtime();

	// #pragma omp parallel for num_threads(thread_count)
	for (i = 2; i < N; i++) {
		if (isPrime[i]) {
			int j;
			#pragma omp parallel for num_threads(thread_count)
			for (j = i + i; j < N; j += i)
				isPrime[j] = 0;
		}
	}

	int cnt = 0;
	for (i = 2; i < N; i++) {
		if (isPrime[i]) {
			primes[nPrime++] = i;
			cnt++;
		}
	}
	ttaken = omp_get_wtime() - tstart;

Result: 

Generates much slower result compared to first usage in this doc, even when thread_num = 1.

Time taken for increasing thread_num increases rapidly (see below).

dz727@crunchy1[test]$ ./a.out 1000000 1
Pi(1000000) = 78498
Time taken = 0.076535
dz727@crunchy1[test]$ ./a.out 1000000 1
Pi(1000000) = 78498
Time taken = 0.077334
dz727@crunchy1[test]$ ./a.out 1000000 2
Pi(1000000) = 78498
Time taken = 0.199423
dz727@crunchy1[test]$ ./a.out 1000000 2
Pi(1000000) = 78498
Time taken = 0.187961
dz727@crunchy1[test]$ ./a.out 1000000 4
Pi(1000000) = 78498
Time taken = 0.355501

===================================================
=================== Conclusion ====================
===================================================

Use the first one.